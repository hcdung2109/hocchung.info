<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;

class Article extends Model
{
    // defined attributes
    protected $other_image;

    /**
     * Set default attributes
     * @var array
     */
    protected $attributes =  [
        'count_views' => 0,
        'is_published' => 1,
    ];

    /**
     * The attributes that are mass assignable
     * @var array
     */

    protected $fillable = [
        'title', 'slug', 'image', 'summary','desc', 'is_published','count_views','category_id','tutorial_id'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        // before create
        static::creating(function ($article) {
            // create slug
            $article->updateSlug();

        });

        // before update
        static::updating(function ($article) {

            $article->updateSlug();

        });

        // before delete
        static::deleting(function ($article){
            // delete Related Image
            $article->deleteImage();

        });
    }

    /**
     * Get the route key for the model.
     *
     * @return string
     */
    public function getRouteKeyName()
    {
        return 'slug';
    }

    /**
     * create and update slug
     */
    public function updateSlug()
    {
        $this->slug = str_slug($this->title,"-");
    }


    public function deleteImage()
    {
        @Storage::delete($this->image);
    }


    /**
     * Define relationship between Category and article
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function category()
    {
        return $this->belongsTo('App\Models\Category');
    }

    public function comments()
    {
        return $this->hasMany('App\Models\Comment');
    }

    public function tutorial()
    {
        return $this->belongsTo('App\Models\Tutorial');
    }

    public function user()
    {
        return $this->belongsTo('App\Models\User');
    }

    public function tags()
    {
        return $this->belongsToMany('App\Models\Tag');
    }


    public static function getArticles($condition = array() , $limit = 10)
    {
        return self::withCount('comments')->where($condition)->limit($limit)->latest()->get();
    }

    /**
     * @param $id
     * @param $cate_id
     * @param int $limit
     * @return \Illuminate\Database\Eloquent\Collection|\Illuminate\Support\Collection|static[]
     */
    public static function getRelatedArticles($id, $cate_id, $limit = 4)
    {
        return self::where('category_id', $cate_id)
                    ->whereNotIn('id',[$id])
                    ->limit($limit)
                    ->latest()
                    ->get();
    }

    public static function getArticlesOfTutorial($id,$tutorial_id, $limit = 50)
    {

        return self::where('tutorial_id', $tutorial_id)
            ->whereNotIn('id',[$id])
            ->limit($limit)
            ->latest()
            ->get();

    }

    public static function getAllArticlesOfTutorial($tutorial_id)
    {
        return self::where('tutorial_id', $tutorial_id)->paginate();

    }

    public static function getArticlesByCategoryID($category_id)
    {
        return self::where('category_id',$category_id)->paginate(15);
    }


    public static function getNews( $cate_id, $offset = 0, $limit = 10)
    {
        return self::where('category_id', $cate_id)->offset($offset)->limit($limit)->get();
    }

    public static function getArticlesHomePage()
    {
        return self::paginate(15);
    }

}
